import os
import socket
import pandas as pd
import random
from ete3 import Tree
from Bio import SeqIO

configfile: 'config/config.yaml'

folder = os.path.abspath('.')
fasta_folder = f"{folder}/data/omm_NT_fasta.v10c_116"
tree_folder = f"{folder}/data/omm_RooTree.v10b_116"
xml_folder = f"{folder}/data/omm_markers"

bayescode_path = {}

for executable in ["mutselomega", "readmutselomega"]:
    exec_path = os.path.join(folder, f'utils/BayesCode/bin/{executable}')
    if not os.path.exists(exec_path):
        # Find executable in the path using whereis. If not found, raise an error.
        split = os.popen(f'whereis {executable}').read().split()
        if len(split) > 1:
            exec_path = split[1].strip()
        else:
            raise FileNotFoundError(f'{executable} not found. Please install BayesCode and add it to your path.')
    bayescode_path[executable] = exec_path
    print(f"Found {executable} at {exec_path}")

# Filter genes
genes_summary = pd.read_csv(f"{folder}/data/omm_genes_summary.csv", header=0, index_col=None)
print(f"Looking at {len(genes_summary)} genes...")
genes_summary = genes_summary[(genes_summary['s1_length'] >= 1) & (genes_summary['s2_length'] >= 1) &
                              (genes_summary['s1_species'] >= 20) & (genes_summary['s2_species'] >= 20)]
print(f"Found {len(genes_summary)} genes with a tree length of at least 1 and at least 20 species in each subset...")
CDS_list = genes_summary['gene'].tolist()[config['CDS_start']:config['CDS_end']]
print(f"Using {len(CDS_list)} genes.")

models = {"sitemutsel": "--ncat 30",
          "siteomega": "--freeomega --omegancat 30 --flatfitness"}

points = config['points']
burn_in = config['burn_in']


localrules: all,filter,

rule all:
    input:
        expand(f"{folder}/processed/{{CDS}}/distance.csv", CDS=CDS_list)

rule subset:
    input:
        fasta = f"{folder}/data/omm_NT_fasta.v10c_116/{{CDS}}_NT.fasta",
        tree = f"{folder}/data/omm_RooTree.v10b_116/{{CDS}}_NT.rootree",
        clade = f"{folder}/data/clades/Glires.tsv",
    output:
        expand(f"{folder}/processed/{{CDS}}/Glires.{{subset}}.phy", subset=["Include", "Exclude"]),
        expand(f"{folder}/processed/{{CDS}}/Glires.{{subset}}.rootree", subset=["Include", "Exclude"])
    shell:
        "python3 {folder}/scripts/subset.py --fasta {input.fasta} --tree {input.tree} --subset {input.clade} --outdir {folder}/processed/{wildcards.CDS}/Glires"

rule run_bayescode:
    input:
        bin = bayescode_path['mutselomega'],
        phy = f"{folder}/processed/{{CDS}}/Glires.{{subset}}.phy",
        tree = f"{folder}/processed/{{CDS}}/Glires.{{subset}}.rootree",
    output:
        f"{folder}/processed/{{CDS}}/Glires.{{subset}}.chain"
    params:
        time="3-23:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
    shell:
        "{input.bin} -a {input.phy} -t {input.tree} -u 2000 {folder}/processed/{wildcards.CDS}/Glires.{wildcards.subset}"

rule read_bayescode:
    input:
        bin = bayescode_path['readmutselomega'],
        chain = f"{folder}/processed/{{CDS}}/{{subset}}.chain",
    params:
        time="0-10:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
    output:
        f"{folder}/processed/{{CDS}}/{{subset}}.siteprofiles"
    shell:
        "{input.bin} --every 1 --until 2000 --burnin 1000 --ss {folder}/processed/{wildcards.CDS}/Glires.{wildcards.subset}"

# pour un gène, expand pour tout les modèles
rule distance:
    input:
        expand(f"{folder}/processed/{{CDS}}/{{subset}}.siteprofiles", subset=["Include", "Exclude"])
    output:
        f"{folder}/processed/{{CDS}}/distance.csv"

# merge


# plot