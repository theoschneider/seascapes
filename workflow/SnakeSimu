import os
import pandas as pd


configfile: 'config/configSimu.yaml'

folder = os.path.abspath('.')
fasta_folder = "data/omm_NT_fasta.v10c_116"
tree_folder = "data/omm_RooTree.v10b_116"
xml_folder = "data/omm_markers"

bayescode_path = {}

python_path = os.popen('which python3').read().strip()

for executable in ["mutselomega", "readmutselomega"]:
    exec_path = os.path.join(folder, f'utils/BayesCode/bin/{executable}')
    if not os.path.exists(exec_path):
        # Find executable in the path using whereis. If not found, raise an error.
        split = os.popen(f'whereis {executable}').read().split()
        if len(split) > 1:
            exec_path = split[1].strip()
        else:
            raise FileNotFoundError(f'{executable} not found. Please install BayesCode and add it to your path.')
    bayescode_path[executable] = exec_path
    print(f"Found {executable} at {exec_path}")

# List folders in processed folder
processed_folders = [dir.name for dir in os.scandir(os.path.join(folder, "processed")) if dir.name != ".DS_Store"]
processed_folders.sort()

# Take the genes that are adaptive
genes_summary = pd.read_csv(f"data/GeneTable.tsv", sep="\t", header=0, index_col=None)
genes_summary = genes_summary[genes_summary["category"] == "adaptive"]

# Take the intersection of adaptive and processed, and take more processed if needed
processed_and_adaptive = list(set(processed_folders) & set(genes_summary["ENSG"]))
n_adaptive = len(processed_and_adaptive)
processed_not_adaptive = list(set(processed_folders) - set(genes_summary["ENSG"]))

folders_list = processed_and_adaptive
folders_list.sort()
folders_list.extend(processed_not_adaptive)

if config["all_genes"]:
    CDS_list = processed_folders
else:
    CDS_list = folders_list[config['CDS_start']:config['CDS_end']]

print(f"Using {len(CDS_list)} genes, including {n_adaptive} adaptive genes.")

models = {"sitemutsel": "--ncat 30",
          "siteomega": "--freeomega --omegancat 30 --flatfitness"}

points = config['points']
burn_in = config['burn_in']


localrules: all,simulations,subset,distance,mask

rule all:
    input:
        expand("processed/{CDS}/simulations.distance.tsv", CDS=CDS_list),
        expand("processed/{CDS}/simulations.{clade}.Whole.{model}.ci0.025.tsv", CDS=CDS_list, model=["omega", "omega_0"], clade=[config['clade']]),
        expand("processed/{CDS}/simulations.{clade}.Whole.{model}.siteprofiles", CDS=CDS_list, model=["omega", "omega_0"], clade=[config['clade']]),
        expand("processed/{CDS}/simulations.{clade}.Whole.mask.tsv", CDS=CDS_list, clade=[config['clade']])

rule simulations:
    input:
        script = "workflow/scripts/simulations.py",
        tree = "data/omm_RooTree.v10b_116/{CDS}_NT.rootree",
        siteprofiles = "processed/{CDS}/{clade}.Whole.omega_0.siteprofiles",
        nucmatrix = "data/Experiments/{CDS}_NT/sitemutsel_1.run.nucmatrix.tsv"
    output:
        "processed/{CDS}/simulations.{clade}.Whole.fasta"
    shell:
        "{python_path} {input.script} --tree {input.tree} --siteprofiles {input.siteprofiles} --R {input.nucmatrix} --outfile {output}"

rule subset:
    input:
        script = "workflow/scripts/subset.py",
        fasta = "processed/{CDS}/simulations.{clade}.Whole.fasta",
        tree = "data/omm_RooTree.v10b_116/{CDS}_NT.rootree",
        species_list = "data/clades/{clade}.tsv"
    output:
        expand("processed/{{CDS}}/simulations.{{clade}}.{subset}.phy", subset=["Include", "Exclude", "Whole"]),
        expand("processed/{{CDS}}/simulations.{{clade}}.{subset}.rootree", subset=["Include", "Exclude", "Whole"])
    shell:
        "{python_path} {input.script} --fasta {input.fasta} --tree {input.tree} --subset {input.species_list} --outdir {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}"

rule run_mutsel:
    input:
        bin = bayescode_path['mutselomega'],
        phy = "processed/{CDS}/simulations.{clade}.{subset}.phy",
        tree = "processed/{CDS}/{clade}.{subset}.rootree"
    output:
        "processed/{CDS}/simulations.{clade}.{subset}.run"
    params:
        time="12:00:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
        until=config["points"]
    shell:
        "{input.bin} --ncat 30 -a {input.phy} -t {input.tree} -u {params.until} {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.{wildcards.subset}"

rule read_mutsel:
    input:
        bin = bayescode_path['readmutselomega'],
        chain = "processed/{CDS}/simulations.{clade}.{subset}.run"
    params:
        time="30:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
        until=config["points"],
        burnin=config["burn_in"]
    output:
        "processed/{CDS}/simulations.{clade}.{subset}.siteprofiles"
    shell:
        "if test -f {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.{wildcards.subset}.chain.gz; \
        then gunzip -f {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.{wildcards.subset}.chain.gz; fi; \
        {input.bin} --every 1 -u {params.until} --burnin {params.burnin} --ss {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.{wildcards.subset} ; \
        gzip -f {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.{wildcards.subset}.chain"

rule run_omega_0:
    input:
        bin = bayescode_path['mutselomega'],
        phy = "processed/{CDS}/simulations.{clade}.Whole.phy",
        tree = "processed/{CDS}/simulations.{clade}.Whole.rootree"
    output:
        "processed/{CDS}/simulations.{clade}.Whole.omega_0.run"
    params:
        time="12:00:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
        until=config["points"]
    shell:
        "{input.bin} --ncat 30 -a {input.phy} -t {input.tree} -u {params.until} {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.Whole.omega_0"

rule run_omega:
    input:
        bin = bayescode_path['mutselomega'],
        phy = "processed/{CDS}/simulations.{clade}.Whole.phy",
        tree = "processed/{CDS}/simulations.{clade}.Whole.rootree"
    output:
        "processed/{CDS}/simulations.{clade}.Whole.omega.run"
    params:
        time="12:00:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
        until=config["points"]
    shell:
        "{input.bin} --freeomega --omegancat 30 --flatfitness -a {input.phy} -t {input.tree} -u {params.until} {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.Whole.omega"

rule read_omega:
    input:
        bin = bayescode_path['readmutselomega'],
        chain = "processed/{CDS}/simulations.{clade}.Whole.{model}.run"
    params:
        time="30:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
        until=config["points"],
        burnin=config["burn_in"]
    output:
        "processed/{CDS}/simulations.{clade}.Whole.{model}.ci0.025.tsv"
    shell:
        "if test -f {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.Whole.{wildcards.model}.chain.gz; \
        then gunzip -f {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.Whole.{wildcards.model}.chain.gz; fi; \
        {input.bin} --every 1 -u {params.until} --burnin {params.burnin} --confidence_interval 0.025 --{wildcards.model} {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.Whole.{wildcards.model} ; \
        {input.bin} --every 1 -u {params.until} --burnin {params.burnin} --ss {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.Whole.{wildcards.model} ; \
        gzip -f {folder}/processed/{wildcards.CDS}/simulations.{wildcards.clade}.Whole.{wildcards.model}.chain"

rule distance:
    input:
        expand("processed/{{CDS}}/simulations.{clade}.{subset}.siteprofiles", subset=["Include", "Exclude"], clade=[config['clade']])
    output:
        "processed/{CDS}/simulations.distance.tsv"
    shell:
        "{python_path} workflow/scripts/simple_distance.py --path1 {input[0]} --path2 {input[1]} --outpath {output}"

rule mask:
    input:
        expand("processed/{{CDS}}/{clade}.Whole.phy", clade=[config['clade']])
    output:
        "processed/{CDS}/simulations.{clade}.Whole.mask.tsv"
    shell:
        "{python_path} workflow/scripts/mask.py --alipath {input} --outpath {output}"
